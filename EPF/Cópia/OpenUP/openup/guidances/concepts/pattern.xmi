<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="_QvmkAMM1EdmSIPI87WLu3g" name="patterns,_0YJvUMlgEdmt3adZL5Dmdw" guid="_QvmkAMM1EdmSIPI87WLu3g" changeDate="2007-02-26T06:45:45.531-0300" version="1.0.0">
  <mainDescription>&lt;h4>Origens&lt;/h4>&#xD;
&lt;p>A idéia dos padrões, como é aplicada ao design de software, vem do trabalho de Christopher Alexander. Ele escreveu extensamente sobre a aplicação de padrões ao design e à construção de cidades e edifícios. Dois de seus livros, &lt;em>A Pattern Language&lt;/em> [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#ALE77&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>ALE77&lt;/a>] e &lt;em>The Timeless Way of Building&lt;/em> [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#ALE79&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>ALE79&lt;/a>] tiveram grande impacto na comunidade de software e na adoção dos padrões de software para o design de software. Seus conceitos de padrões e da linguagem de padrão fornecem um modelo para a captura do design de software de forma que possa ser reaplicado em situações recorrentes.&lt;/p>&#xD;
&lt;h4>Uma definição de padrões&lt;/h4>&#xD;
&lt;p>Atualmente, A definição normalmente mais usada para padrões de software vem de [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#GAM95&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>GAM95&lt;/a>]:&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>&quot;Um padrão de design descreve o problema, uma solução para o problema que consiste em um arranjo geral de objetos e classes, o momento de aplicar a solução e as conseqüências da aplicação da solução.&quot;&lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>Normalmente esta definição só serve como um ponto de partida. Entretanto, uma definição mais rica, baseada no trabalho de Alexander, é oferecida por Gabriel em seu livro, &lt;em>A Timeless Way of Hacking&lt;/em> [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#ALU03&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>ALU03&lt;/a>], em que cada padrão é uma regra de três partes que expressa os relacionamentos entre um determinado contexto, um determinado sistema de forças que ocorrem repetidamente nesse contexto e uma determinada configuração de software que permita que estas forças se resolvam.&lt;/p>&#xD;
&lt;h4>Descrevendo padrões&lt;/h4>&#xD;
&lt;p>É comum descrever padrões usando o formato popular criado por Erich Gamma e seus três colegas [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#GAM95&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>GAM95&lt;/a>]. Eles ficaram conhecidos como a Gangue dos Quatro (GoF); conseqüentemente, sua descrição ficou conhecida como &lt;strong>formato GoF&lt;/strong>. O formato GoF usa as seguintes palavras-chave para descrever os padrões de projeto orientados a objeto:&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Nome e classificação do padrão&lt;/strong>: Nomear o padrão permite que o design trabalhe em um nível mais elevado de abstração, usando um vocabulário de padrões. Gamma diz que encontrar um bom nome é um dos problemas mais difíceis de resolver no desenvolvimento de um catálogo de padrões (veja &lt;strong>Pattern catalogues&lt;/strong> nesta seção).&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Intenção&lt;/strong>: Resposta para perguntas, tais como: O que o padrão faz? Para qual problema ele é indicado?&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Também conhecido como&lt;/strong>: Outros nomes para o padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Motivação&lt;/strong>: Um cenário concreto que ilustra um problema de design e como o padrão resolve o problema.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Aplicabilidade&lt;/strong>:Instruções para o reconhecimento das situações onde os padrões são aplicáveis..&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Estrutura&lt;/strong>: Uma representação gráfica das classes no padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Participantes&lt;/strong>: As responsabilidades das classes e dos objetos que participam no padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Colaborações&lt;/strong>: Como os participantes colaboram para cumprir suas responsabilidades.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Conseqüências&lt;/strong>: Os resultados, efeitos colaterais e perdas causadas pelo uso do padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Implementação&lt;/strong>: Orientação na implementação do padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Código de exemplo&lt;/strong>: Fragmentos de código que ilustram a implementação do padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Usos conhecidos&lt;/strong>: Onde encontrar exemplos do mundo real sobre a utilização do padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Padrões relacionados&lt;/strong>: Sinergias, diferenças e outros relacionamentos do padrão.&lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>Embora o formato GoF seja especificamente direcionado para o desenvolvimento orientado a objeto, você pode usá-lo, com poucas modificações, para tratar outros padrões de software. Um formato de palavras-chave mais geral para os padrões de software baseado nos princípios de Alexander usa as palavras-chave &lt;em>problema&lt;/em>, &lt;em>contexto&lt;/em>, &lt;em>forças&lt;/em> e &lt;em>solução&lt;/em>.&lt;/p>&#xD;
&lt;h4>Catálogos de padrões&lt;/h4>&#xD;
&lt;p>Para ajudar na identificação e seleção de padrões, vários esquemas de classificação foram propostos. Um dos esquemas mais recentes, proposto por Buschmann e seus associados, [&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#BUS96&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>BUS96&lt;/a>] usa três classificadores: granularidade, funcionalidade e princípios estruturados. Destes três classificadores, a granularidade tornou-se popular. A Granularidade classifica os padrões em três níveis de abstração:&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Padrões Arquiteturais&lt;/strong>: Os padrões arquiteturais expressam a estrutura fundamental de um esquema de software. Alguns exemplos de padrão arquitetural são: Camadas (layers), pipes e filtros e o padrão modelo visão controle (MVC).&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Padrões de design&lt;/strong>: A arquitetura de software normalmente consiste de pequenas unidades arquiteturais que são descritas por padrões de design. O padrão GoF é um exemplo de padrão de design.&lt;/p>&#xD;
    &lt;/li>&#xD;
    &lt;li>&#xD;
        &lt;p>&#xD;
            &lt;strong>Idiomas&lt;/strong>: Um idioma é um padrão de mais baixo nível e é específico para uma linguagem de programação.&lt;/p>&#xD;
    &lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>Buschmann e seus colegas introduziram quatro grupos para categorizar padrões arquiteturais:&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>Estrutura&lt;/li>&#xD;
    &lt;li>Sistemas distribuídos&lt;/li>&#xD;
    &lt;li>Sistemas interativos&lt;/li>&#xD;
    &lt;li>Sistemas Adaptáveis&lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;p>A tabela a seguir mostra a categorização de seus padrões arquiteturais.&lt;/p>&#xD;
&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;85%&quot; summary=&quot;Categorias para Padrões Arquiteturais [BUS96]&quot; border=&quot;1&quot; valign=&quot;top&quot;>&#xD;
    &lt;caption>&#xD;
        &lt;strong>Categorias para Padrões Arquiteturais&lt;br />&#xD;
        &lt;/strong>&#xD;
    &lt;/caption>&#xD;
    &lt;tbody>&#xD;
        &lt;tr>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                &lt;div align=&quot;center&quot;>&#xD;
                    &lt;strong>Categoria&lt;/strong>&#xD;
                &lt;/div>&#xD;
            &lt;/th>&#xD;
            &lt;th scope=&quot;col&quot;>&#xD;
                &lt;div align=&quot;center&quot;>&#xD;
                    &lt;strong>Padrão&lt;/strong>&#xD;
                &lt;/div>&#xD;
            &lt;/th>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>Estrutura&lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;p>Camadas&lt;br /> Pipes e filtros&lt;br /> Quadro-negro&lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>Sistemas distribuídos&lt;/td>&#xD;
            &lt;td>Agente&lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>Sistemas interativos&lt;/td>&#xD;
            &lt;td>Modelo visão controle&lt;br /> Controle da abstração da apresentação&lt;/td>&#xD;
        &lt;/tr>&#xD;
        &lt;tr>&#xD;
            &lt;td>&#xD;
                &lt;p>Sistemas Adaptáveis&lt;/p>&#xD;
            &lt;/td>&#xD;
            &lt;td>&#xD;
                &lt;p>Reflexão&lt;br /> Micro kernel&lt;/p>&#xD;
            &lt;/td>&#xD;
        &lt;/tr>&#xD;
    &lt;/tbody>&#xD;
&lt;/table>&#xD;
&lt;p>Para padrões de design, o grupo de Gamma categorizou seus padrões de design pela finalidade, usando três categorias:&lt;/p>&#xD;
&lt;ul>&#xD;
    &lt;li>Criativo&lt;/li>&#xD;
    &lt;li>Estrutural&lt;/li>&#xD;
    &lt;li>Comportamental&lt;/li>&#xD;
&lt;/ul>&#xD;
&lt;h4>Linguagens de padrão&lt;/h4>&#xD;
&lt;p>Além do conceito de padrões, Alexander deu também à comunidade de software o conceito de uma linguagem de padrão. A finalidade de desenvolver uma linguagem de padrão era fornecer um vocabulário de princípios de design (padrões) que permitiriam para aqueles que trabalham, estudam ou vivem em construções, comunicar-se eficazmente com os arquitetos e os projetistas dessas construções. Alexander explica isso ao usar uma linguagem de padrão:&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>Nós sempre a usamos como uma seqüência, passando através dos padrões, movendo-se sempre dos padrões maiores para os menores, sempre dos que criam a estrutura para os que embelezam estas estruturas, e então para àqueles que embelezam os embelezamentos.&lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>Ao aplicar os padrões desta forma, Alexander advogou o uso das linguagens geradoras do padrão, aquelas que, dado um contexto inicial, sempre conduziriam a um design. Alexander declarou:&lt;/p>&#xD;
&lt;blockquote>&#xD;
    &lt;p>Assim, como no caso das linguagens naturais, a linguagem de padrão é geradora. Ela não só nos diz quais são as regras de arranjo, mas nos mostra como construir os arranjos - tantos quantos nós quisermos - que satisfaçam as regras.&lt;/p>&#xD;
&lt;/blockquote>&#xD;
&lt;p>Na aplicação de padrões de software, os nomes dos padrões fornecem um vocabulário para a comunicação das idéias de software. A aplicação seqüencial dos padrões encontra uso nos processos de design de software, tanto iterativo quanto em cascata, que aplicam sucessivamente padrões arquiteturais, padrões de design e, finalmente, idiomas para projetar e implementar um sistema de software. Os processos de software, entretanto, dependem muito mais das habilidades do Arquiteto e do Desenvolvedor para guiar a aplicação dos padrões do que de uma linguagem geradora de padrão.&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
