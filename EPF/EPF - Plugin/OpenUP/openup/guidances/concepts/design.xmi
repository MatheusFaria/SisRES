<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-c5Uh71vXTPN-VmrGYVRV7w" name=",_bFjlAPTYEduDKIuqTXQ8SA" guid="-c5Uh71vXTPN-VmrGYVRV7w" changeDate="2007-04-27T13:52:05.024-0300" version="7.2.0">
  <mainDescription>&lt;p>Projetar um sistema é a criação de sua estrutura interna de forma robusta, extensível e de alta qualidade. Um bom design melhora a qualidade e torna um sistema mais fácil de manter e estender, ao passo que um design pobre pode elevar significativamente o custo de produção e manutenção do software.&lt;/p>&#xD;
&lt;p>O design é uma abstração do código, que representa o sistema, a partir de uma perspectiva que torna mais fácil abordar a estrutura e o comportamento do sistema. Isto pode ser feito através da visualização do código, porém é mais difícil e menos eficaz resolver os problemas estruturais e comportamentais desta forma. O design pode ser: modelos visuais, simples esboços, descrições textuais, etc. O elemento crítico do design é que ele descreve como diferentes elementos do sistema interagem para atender aos requisitos.&lt;/p>&#xD;
&lt;p>A quantidade de design que é formalmente documentada e mantida irá variar dependendo de quão critico é o design e de quanto do design tiver que ser comunicado aos futuros membros da equipe. No mínimo, todos os elementos de design arquiteturalmente significantes devem ser documentados e mantidos atualizados em sincronia com a implementação. Estes são aspectos críticos do sistema que são necessários para o entendimento e a manutenção do software. Outras estruturas e comportamentos importantes ou complexos podem ser mantidos também. E alguns contratos podem exigir que todo o projeto seja cuidadosamente documentado.&lt;/p>&#xD;
&lt;p>Em muitos projetos, provavelmente existirão aspectos do design que só serão documentados com o propósito de criar uma solução ou um guia de como um determinado comportamento será realizado. Pode não ser útil a sobrecarga da manutenção desta informação à medida que o design for transformado através de re-fatoração e outras influências. No entanto, ele pode ser útil para arquivar as decisões iniciais, imagens de quadros brancos ou arquivos de forma que possam ser referenciados no futuro, se necessário. Eles podem ser vistos como &quot;antigas memórias de reunião&quot;, que estão armazenadas para referência futura. Eles podem não refletir o design atual, mas eles ainda podem fornecer informações úteis.&lt;/p>&#xD;
&lt;h3>Passos Múltiplos&lt;/h3>&#xD;
&lt;p>O design será revisto muitas vezes ao longo do ciclo de vida iterativo e mesmo dentro de uma interação. Cada vez que alguma atividade de design está sendo executada, ela será feita com algum objetivo específico. O objetivo pode ser identificar um conjunto de participantes numa colaboração que possam ser incentivados a realizar o comportamento necessário (um passo de análise). O objetivo pode estar na identificação de alguns elementos granulares necessários à execução de algum cenário (um passo arquitetural). Então um passo pode ser realizado em um desses componentes para identificar os elementos que irão colaborar entre si para realizar o comportamento necessário (um passo mais detalhado de design).&lt;br /> &lt;br /> O design pode ser realizado em um contexto específico tal como o contexto de base de dados, interfaces de usuário, ou talvez, o contexto de como alguma biblioteca existente será aplicada. Nestes casos, as etapas do design serão realizadas apenas para comunicar e tomar decisões relativas nesse contexto.&lt;/p>&#xD;
&lt;p>Evite a paralisia analítica Evite refinar, estender e melhorar o design além de uma versão mínima que seja suficiente para atender as necessidades dos requisitos dentro da arquitetura. O design deve ser executado em pequenos pedaços, comprovado por meio da implementação, melhorado através da re-fatoração e integrado na linha de base para fornecer valor aos Stakeholders.&lt;/p>&#xD;
&lt;h3>Design versus Arquitetura&lt;/h3>&#xD;
&lt;p>O design é uma coisa real, é a construção da estrutura e do comportamento e do sistema. A arquitetura [link para conceito sobre Arquitetura de Software] define princípios, contextos e restrições sobre a construção o sistema. A arquitetura é descrita nos artefatos da arquitetura, mas é percebida como design (visual ou não) e implementação.&lt;br /> &lt;br /> Uma forma de perceber a arquitetura é que ela contribui para tornar todo o design mais coeso com si mesmo pelo equilíbrio de todas as necessidades do sistema. O design tende a concentrar-se em uma área de cada vez. A arquitetura ajuda a assegurar que o design esteja coerente e adequado com as metas do sistema. Por exemplo, pode haver restrições impostas à maior parte do design para viabilizar o desempenho de uma parte do sistema, tal como a melhoria do acesso a um sistema legado. A não-conformidade com essas restrições do design pode fazer com que o sistema deixe de satisfazer os requisitos de desempenho do acesso ao sistema legado. A conformidade com a arquitetura assegura que todas as metas do sistema sejam alcançadas pelo equilíbrio dos problemas técnicos concorrentes.&lt;/p>&#xD;
&lt;h3>Qualidade do Design&lt;/h3>&#xD;
&lt;h4>Você Não Necessitará Disso&lt;/h4>&#xD;
&lt;p>O princípio YAGNI é uma boa abordagem geral para o design. Embora o design deva ser robusto o suficiente para modificação, re-utilização, e manutenção, ele também deve ser o mais simples possível. Uma das formas de mantê-lo simples é fazer algumas suposições sobre o que o projeto vai precisar no futuro. Não presuma que você precisará de algo até que você saiba que irá precisar dele, então faça um bom trabalho de adicioná-lo. Acrescente o que é necessário para o requisito ou a iteração atual. Re-fatore o design apropriadamente quando mais funcionalidades necessitarem ser acrescentadas ou o design tenha que ser mais complexo para lidar com novas circunstâncias.&lt;/p>&#xD;
&lt;h4>Acoplamento e Coesão&lt;/h4>&#xD;
&lt;p>Dois dos mais elementares princípios de design são: o acoplamento e a coesão. Um bom design contém elementos que têm alta coesão e baixo acoplamento. Alta coesão significa que um único elemento, tal como uma classe ou subsistema, seja composto de peças que estejam estreitamente relacionadas ou trabalhem em estreita colaboração para cumprir algum propósito. Baixo acoplamento significa que os elementos de um sistema têm um mínimo de dependências em si. Um único elemento, como um subsistema deve ser facilmente substituível por outro subsistema que tenha um comportamento semelhante.&lt;br /> &lt;br /> Por exemplo, num sistema de pagamento, uma classe Empregado deve ter alta coesão se ela contiver elementos e funções, tais como Nome, Número de Identificação e Salário Mensal. A princípio, pode parecer que a função Calcular Pagamento também será coesiva. Mas quando você considerar que empregados horistas devem ser pagos pelas horas extras, as pessoas de vendas devem ter comissão calculada para elas, etc. a função estará menos relacionada com o Empregado e deverá provavelmente ter sua própria classe ou subsistema.&lt;br /> &lt;br /> Um exemplo de baixo acoplamento é que o subsistema Calcular Pagamento possa ser facilmente substituído por terceiros, podendo ser mais robusto e oferecer mais recursos.&lt;br /> &lt;br /> É muito importante estar consciente sobre o acoplamento e a coesão porque eles estão em vários princípios e estratégias de design tais como os padrões.&lt;/p>&#xD;
&lt;h4>Princípio Aberto-Fechado&lt;/h4>&#xD;
&lt;p>Os elementos do design devem estar &quot;abertos&quot; para extensão, mas &quot;fechados&quot; para modificação. A meta deste princípio é a criação de software que possa ser estendido sem a alteração de código&lt;a class=&quot;elementLinkWithUserText&quot; href=&quot;./../../../openup/guidances/supportingmaterials/references_6CCF393.html#MEY97&quot; guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[MEY97]&lt;/a>. Isso ocorre porque cada mudança de software gera o risco de introdução de erros no código que já está correto. Isto também permite que uma funcionalidade possa ser reutilizada sem ser necessário conhecer os detalhes da implementação, reduzindo o tempo que leva para criar algo novo. Mantendo este princípio em mente ajuda a construir um design mais fácil de manter.&lt;br />&#xD;
&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
