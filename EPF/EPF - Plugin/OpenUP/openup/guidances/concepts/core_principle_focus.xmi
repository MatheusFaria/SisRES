<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:epf="http://www.eclipse.org/epf" epf:version="1.5.1" xmi:id="-HTMJFV29MTZkKWqnIo01Gg" name="core_principle_focus,_9gocwMvoEdqukPpotm3DYg" guid="-HTMJFV29MTZkKWqnIo01Gg" authors="Steve Adolph" changeDate="2007-07-03T15:57:16.890-0300" changeDescription="Added first draft of content." version="0.02">
  <mainDescription>&lt;h1>Introdução&lt;/h1>&#xD;
&lt;p>A arquitetura de um sistema de software é a organização ou a estrutura dos componentes significantes do sistema que interagem através das interfaces, com os componentes compostos de componentes sucessivamente menores e de interfaces.&lt;/p>&#xD;
&lt;p>Sem uma fundamentação arquitetural, um sistema evoluirá de forma ineficiente e casual. Tais sistemas normalmente são difíceis de estender, reutilizar ou integrar sem que exista um substancial re-trabalho. Também é difícil organizar a equipe ou comunicar idéias sem o &lt;b>foco técnico comum&lt;/b> que a arquitetura fornece.&lt;/p>&#xD;
&lt;p>Foque na arquitetura, o mais cedo possível, para reduzir o risco e organizar o desenvolvimento.&lt;/p>&#xD;
&lt;h1>Práticas&lt;/h1>&#xD;
&lt;h2>Crie a arquitetura para o que você conhece hoje&lt;/h2>&#xD;
&lt;p>Como Albert Einstein disse, simplifique, mas não seja simplista. Projetos de software carecem de recursos e o desejo dos desenvolvedores de criar soluções elegantes pode tornar um sistema muito mais complexo do que os Stakeholders solicitaram. Gastar energia num sistema à prova de requisitos futuros, num ambiente incerto ou turbulento, provavelmente deixará o código inchado, o que eleva o custo total com poucos benefícios reais.&lt;/p>&#xD;
&lt;p>Crie arquiteturas que atendam às necessidades reais dos Stakeholders, e forneça flexibilidade e velocidade apropriadas aos requisitos da forma como eles são conhecidos atualmente. Evite o desejo, mesmo que seja bem intencionado, de especular sobre futuros requisitos e assim super-dimensionar a arquitetura. Existe uma diferença entre uma arquitetura super-dimensionada e a construção de uma arquitetura que seja flexível e extensível. Por exemplo, pode não existir uma razão aparente para criar três camadas arquiteturais em um sistema, mas é provável que o sistema vá crescer de forma imprevisível, então devemos construir a arquitetura para isso.&lt;/p>&#xD;
&lt;h2>Faça da arquitetura uma ferramenta de colaboração&lt;/h2>&#xD;
&lt;p>A falta de um entendimento comum pelos desenvolvedores sobre um sistema causa indecisões e conflito de opiniões entre eles e pode rapidamente paralisar o projeto. Os desenvolvedores podem ter diferentes modelos mentais do sistema e trabalhar com propósitos difusos.&lt;/p>&#xD;
&lt;p>Crie e evolua a arquitetura do sistema com a intenção de usá-la no alinhamento dos modelos mentais concorrentes dos desenvolvedores sobre o sistema. Uma boa arquitetura facilita a colaboração ao fornecer um vocabulário comum para todas as discussões inerentes ao desenvolvimento do sistema.&lt;/p>&#xD;
&lt;h2>Enfrente a complexidade elevando o nível de abstração&lt;/h2>&#xD;
&lt;p>Construir software é complexo e a capacidade das pessoas para enfrentar a complexidade é limitada. Conforme o sistema cresce, fica mais difícil para a equipe desenvolver um entendimento comum do sistema, porque é difícil enxergá-lo em sua totalidade.&lt;/p>&#xD;
&lt;p>Utilize modelos para elevar o nível de abstração e focar nas decisões de maior importância, tais como nos relacionamentos e padrões, ao invés de se atolar em detalhes. Modelos elevam o nível de abstração e permitem que o sistema seja mais facilmente entendido através de diferentes perspectivas.&lt;/p>&#xD;
&lt;h2>Organize a arquitetura com componentes de baixo acoplamento e alta coesão&lt;/h2>&#xD;
&lt;p>Alto acoplamento entre os componentes torna um sistema frágil e de difícil entendimento. Criar um software é caro; então, se os componentes existentes puderem ser reutilizados, isto pode reduzir o esforço exigido para criá-lo.&lt;/p>&#xD;
&lt;p>Organize a arquitetura do sistema em componentes que maximizem a coesão e minimizem o acoplamento. Isso melhorará a compreensão, elevará a flexibilidade e aumentará as oportunidades de reuso.&lt;/p>&#xD;
&lt;h2>Reutilize recursos existentes&lt;/h2>&#xD;
&lt;p>Não desperdice recursos construindo algo que você pode simplesmente reutilizar ou mesmo comprar.&lt;/p>&#xD;
&lt;p>Esforce-se em reutilizar os recursos que já existem. Desenvolvedores normalmente relutam em reutilizar algum recurso porque eles não atendem exatamente as suas necessidades ou são de baixa qualidade. Esteja preparado para tirar proveito da economia que você pode fazer usando os recursos existentes, mesmo que eles necessitem que você faça uma acomodação na arquitetura ou relaxe alguma restrição.&lt;/p></mainDescription>
</org.eclipse.epf.uma:ContentDescription>
